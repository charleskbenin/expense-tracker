// Mocks generated by Mockito 5.4.4 from annotations
// in expense_tracker/test/auth/user_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:expense_tracker/core/auth/data/datasources/user_local_datasource.dart'
    as _i5;
import 'package:expense_tracker/core/auth/data/datasources/user_remote_datasource.dart'
    as _i3;
import 'package:expense_tracker/core/auth/domain/models/user/user_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserModel_0 extends _i1.SmartFake implements _i2.UserModel {
  _FakeUserModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRemoteDatasource extends _i1.Mock
    implements _i3.UserRemoteDatasource {
  MockUserRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, dynamic>> signup(
          {required Map<String, dynamic>? requestBody}) =>
      (super.noSuchMethod(
        Invocation.method(
          #signup,
          [],
          {#requestBody: requestBody},
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> login(
          {required Map<String, dynamic>? requestBody}) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {#requestBody: requestBody},
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);
}

/// A class which mocks [UserLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLocalDatasource extends _i1.Mock
    implements _i5.UserLocalDatasource {
  MockUserLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.UserModel> retrieveUser() => (super.noSuchMethod(
        Invocation.method(
          #retrieveUser,
          [],
        ),
        returnValue: _i4.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #retrieveUser,
            [],
          ),
        )),
      ) as _i4.Future<_i2.UserModel>);

  @override
  _i4.Future<void> persistUser(_i2.UserModel? user) => (super.noSuchMethod(
        Invocation.method(
          #persistUser,
          [user],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isLoggedIn() => (super.noSuchMethod(
        Invocation.method(
          #isLoggedIn,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
